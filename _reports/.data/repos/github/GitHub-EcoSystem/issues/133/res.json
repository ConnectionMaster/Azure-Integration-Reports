{
  "status": 200,
  "url": "https://api.github.com/repos/github/GitHub-EcoSystem/issues/133?per_page=100",
  "headers": {
    "access-control-allow-origin": "*",
    "access-control-expose-headers": "ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset",
    "cache-control": "private, max-age=60, s-maxage=60",
    "connection": "close",
    "content-encoding": "gzip",
    "content-security-policy": "default-src 'none'",
    "content-type": "application/json; charset=utf-8",
    "date": "Wed, 30 Sep 2020 10:59:10 GMT",
    "etag": "W/\"dfea79f2ac1fffdd8d9607e4414036bddaaedbc5af32d5f4eb049354134dcd54\"",
    "last-modified": "Sun, 27 Sep 2020 03:10:29 GMT",
    "referrer-policy": "origin-when-cross-origin, strict-origin-when-cross-origin",
    "server": "GitHub.com",
    "status": "200 OK",
    "strict-transport-security": "max-age=31536000; includeSubdomains; preload",
    "transfer-encoding": "chunked",
    "vary": "Accept, Authorization, Cookie, X-GitHub-OTP, Accept-Encoding, Accept, X-Requested-With",
    "x-accepted-oauth-scopes": "repo",
    "x-content-type-options": "nosniff",
    "x-frame-options": "deny",
    "x-github-media-type": "github.squirrel-girl-preview; format=json, github.inertia-preview; format=json, github.starfox-preview; format=json, github.mockingbird-preview; param=sailor-v-preview; format=json",
    "x-github-request-id": "0791:2F1D:38990CD:5E81EFF:5F7464FD",
    "x-oauth-scopes": "admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, gist, repo, user, workflow, write:discussion, write:packages",
    "x-ratelimit-limit": "5000",
    "x-ratelimit-remaining": "3762",
    "x-ratelimit-reset": "1601465977",
    "x-ratelimit-used": "1238",
    "x-xss-protection": "1; mode=block"
  },
  "data": {
    "url": "https://api.github.com/repos/github/GitHub-EcoSystem/issues/133",
    "repository_url": "https://api.github.com/repos/github/GitHub-EcoSystem",
    "labels_url": "https://api.github.com/repos/github/GitHub-EcoSystem/issues/133/labels{/name}",
    "comments_url": "https://api.github.com/repos/github/GitHub-EcoSystem/issues/133/comments",
    "events_url": "https://api.github.com/repos/github/GitHub-EcoSystem/issues/133/events",
    "html_url": "https://github.com/github/GitHub-EcoSystem/issues/133",
    "id": 635349449,
    "node_id": "MDU6SXNzdWU2MzUzNDk0NDk=",
    "number": 133,
    "title": "GH Actions for creating/distributing VM images for immutable/mutable deployments",
    "user": {
      "login": "azooinmyluggage",
      "id": 6857119,
      "node_id": "MDQ6VXNlcjY4NTcxMTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6857119?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/azooinmyluggage",
      "html_url": "https://github.com/azooinmyluggage",
      "followers_url": "https://api.github.com/users/azooinmyluggage/followers",
      "following_url": "https://api.github.com/users/azooinmyluggage/following{/other_user}",
      "gists_url": "https://api.github.com/users/azooinmyluggage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/azooinmyluggage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/azooinmyluggage/subscriptions",
      "organizations_url": "https://api.github.com/users/azooinmyluggage/orgs",
      "repos_url": "https://api.github.com/users/azooinmyluggage/repos",
      "events_url": "https://api.github.com/users/azooinmyluggage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/azooinmyluggage/received_events",
      "type": "User",
      "site_admin": true
    },
    "labels": [
      {
        "id": 2080405513,
        "node_id": "MDU6TGFiZWwyMDgwNDA1NTEz",
        "url": "https://api.github.com/repos/github/GitHub-EcoSystem/labels/Epic",
        "name": "Epic",
        "color": "654bcc",
        "default": false,
        "description": ""
      },
      {
        "id": 2200347512,
        "node_id": "MDU6TGFiZWwyMjAwMzQ3NTEy",
        "url": "https://api.github.com/repos/github/GitHub-EcoSystem/labels/Team:%20TGR",
        "name": "Team: TGR",
        "color": "8bc63d",
        "default": false,
        "description": "Team Tiger - Current Artifacts & Library Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "raiyanalam",
      "id": 7879476,
      "node_id": "MDQ6VXNlcjc4Nzk0NzY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7879476?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/raiyanalam",
      "html_url": "https://github.com/raiyanalam",
      "followers_url": "https://api.github.com/users/raiyanalam/followers",
      "following_url": "https://api.github.com/users/raiyanalam/following{/other_user}",
      "gists_url": "https://api.github.com/users/raiyanalam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/raiyanalam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/raiyanalam/subscriptions",
      "organizations_url": "https://api.github.com/users/raiyanalam/orgs",
      "repos_url": "https://api.github.com/users/raiyanalam/repos",
      "events_url": "https://api.github.com/users/raiyanalam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/raiyanalam/received_events",
      "type": "User",
      "site_admin": true
    },
    "assignees": [
      {
        "login": "raiyanalam",
        "id": 7879476,
        "node_id": "MDQ6VXNlcjc4Nzk0NzY=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/7879476?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/raiyanalam",
        "html_url": "https://github.com/raiyanalam",
        "followers_url": "https://api.github.com/users/raiyanalam/followers",
        "following_url": "https://api.github.com/users/raiyanalam/following{/other_user}",
        "gists_url": "https://api.github.com/users/raiyanalam/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/raiyanalam/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/raiyanalam/subscriptions",
        "organizations_url": "https://api.github.com/users/raiyanalam/orgs",
        "repos_url": "https://api.github.com/users/raiyanalam/repos",
        "events_url": "https://api.github.com/users/raiyanalam/events{/privacy}",
        "received_events_url": "https://api.github.com/users/raiyanalam/received_events",
        "type": "User",
        "site_admin": true
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-09T11:30:36Z",
    "updated_at": "2020-09-04T06:55:27Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "## Summary:\r\n\r\nWith the advent of public cloud, there has been a massive surge in usage of PaaS services. Newer organizations, especially unicorns, have the latest cutting edge tech stack and prefer no-management PaaS services like WebApps, AKS etc over conventional physical hardwares. The applications are ground up modelled in a manner that they can be hosted  in such public cloud services. \r\n   However, a large number of companies, especially ones that have conventionally been hosting their applications in on-prem servers, choose Virtual Machines(VMs) as the default resource when starting their journey in the cloud. They usually spin up VMs which are exactly the same in configuration as those in the on-prem environment and then move their applications ‘as is’ to the cloud without the need to replatform their code. As these organizations grow, the number of VMs that are managed are scaled up and there is a need to automate the deployment of services to these Virtual Machines in a reliable manner. \r\n\r\n\r\n### Problem statement:\r\n-  Customers using Azure Virtual Machines struggle today to create customized Virtual Machines images from their CI workflows. There is no easy way to inject artifact built during CI workflows into VM images. \r\n- Customers that create customized images struggle to maintain/distribute large number of images versions and their flavors.\r\n\r\n\r\n### Features:\r\n- [X] VM Image Builder action #36\r\nThis action will use Azure Image Builder service to inject artifacts (built during CI workflows) into custom images, which will help customers in immutable/mutable deployment strategies.  This action will also leverage AIB service to publish images to services like Shared Image Gallery that manage/distribute image versions.\r\n\r\n- [X] VM Image Builder templates for VM and VMSS #132\r\nThese are a sample workflows that customers can use to consume custom image from sources like Shared Image Gallery and spin up Azure resources like VMs or VMSS.\r\n\r\n\r\n\r\n## EPD\r\n\r\nEngineering: @narula0781 \r\nProduct:  @raiyanalam \r\nDesign: N/A\r\n\r\n\r\n## Partner Teams:\r\nEngineering: Daniel S\r\nProduct: N/A\r\n\r\n\r\n## Related Documents:\r\n\r\n1. [Spec](https://github.com/lnochili/azure-actions-imagebuilder/blob/master/README.md)\r\n\r\n\r\n## Customer Connects:\r\nTO DO. See Raw notes below.\r\n\r\n\r\n## Success Criteria\r\n\r\nThis action is used in at least 70 distinct repos in first month. [ We estimate a slower pickup as this is the first feature for Virtual machines in via GitHub workflows and the CD ecosystem for VMs is not strong. ]\r\n\r\nBaseline for success criteria:\r\n- Baseline1: The ADO task (preview) for Azure Image builder today is used in ~450 jobs in a month. \r\n- Baseline2: During the initial launch phase of actions, Sep 2019 had nearly 269 repos with multiple actions like az login.\r\n\r\n\r\n=============================\r\n\r\n**Customer connects:(Raw Notes)**\r\n\r\n1. Wouter de Kort, MVP, works with Achmea as consultant\r\n   Notes: \r\n\t- Based out of netherland\r\n\t- Works with organization like Achmea\r\n\t- Virtual machines are used for developer workstations, SAP deployments, HANA deployments[nearly 2500 VMs used for this], Firewall solutions, Networking(Hub and Spoke mode)\r\n\t- PaaS Vs IaaS: PaaS is preferred but cannot always use it because of application contraints\r\n\t- VMs are used for lift and shift scenarios. In case of Achmea, there were existing pipelines that deployed to VM, they were just pointed to Cloud VMs once they are moved to cloud \r\n\t- Platform team prepares base images using packer with all the security updates.\r\n\t\t○ Linking to Virtual Network\r\n\t\t○ Domain joined\t\t\r\n2 ways to creating VMs and running app in them\r\n\t- Pipeline takes the  hardened image from Shared image gallery and add application on top of the image\r\n\t- Pipeline takes the hardened image, creates VM. Another pipeline applies application code on this VM.\r\n\t- New VMs are created from new images which have security patches baked in them. However for exisiting VMs powershell dsc is used to configure updates periodically.\r\n\t\t○ Windows update\r\n\t\t○ Chocolate updates\r\n\t- Magic wand questions:\r\n           -  creation of images take a lot of time. Is it possible to just replace a layer while creating new image.\r\n          -  Ability to copy configuration from a running vm and create an ARM template from it.\r\n\r\n\r\n\r\n2. Ken Muse,  Consulting Director Wintellect\r\n\t- Worked with companies like Hexagon\r\n\t\t○ Nearly 1200 VMs managed\r\n\t- Hexagon puts out a new VHD image every 30 days. This is then used to create new VMs\r\n\t- Big users of DevTest Labs as well.\r\n\t\t○ Helps create layers on basic OS image and then apply artifacts on top. Eg Sql server\r\n\t\t○ Helps create clone of environments from prod to dev, test etc.\r\n\t- When the VMs being managed is large in number, the deployment and management can't be done manually.\r\n\t\t○ They first use the base image and add their application on top and then deploy.\r\n\t\t○ They use powershell dsc subsequently to update VMs\r\n\t- Lift and Shift is used only when there are components that have dependencies eg. Dependency on OS drivers. Azure migrate and ASR also help in lift and shift scenarios.\r\nThey use terraform to deploy VMs however, the biggest problem is terraform cant execute external scripts that are required to create VMs.\r\n\r\n\r\n3. Harish, Myntra.com\r\n\t- They use terraform for deployments and packer for creating VM images\r\n\t- Have separate images for different purposes like db, application server etc.\r\n\t- In the VMs they have agents running that monitor software and raise alerts\r\n\t- They use Ansible play books to deploy to application or update middleware\r\n\t- Updation of OS (they primarily has CentOs) is done through an OSS tool called Spacewalk. This helps in updating kernel, OS etc\r\n\t- For risk mitigation:\r\n\t\t○ They have external agents that keep monitoring the status of VMs. They also keep running tests and check if the results are being consistent\r\n\t\t○ They also have internal agents in each of the machines. These again keep testing\r\n\t- Lift and Shift: Being a unicorn start up they had pipelines set up that they were using on their on prem VMs. They also had scripts to set up middleware\r\n\t- In azure they spun up machines and pointed pipelines to new VMs\r\n        - Auto scale: They don’t do auto scale. Reason, Myntra currently has a deal with Microsoft of dedicated VMs. They have those VM capacity irrespective of whether they use it or not. \r\n\t- How do they define load etc:  Before holiday season, they do 1 month long testing on their services(load is estimated by business unit that provides them data on customer footprint), whichever service shows bad performance or breaks, they allocate more VMs. \r\n\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/github/GitHub-EcoSystem/issues/133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/github/GitHub-EcoSystem/issues/133/timeline",
    "performed_via_github_app": null
  }
}